/*
 * Copyright (c) 2022 gematik GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.gematik.ti.vauchannel.server;

import static de.gematik.ti.vauchannel.protocol.helpers.ObjectMapperFactory.objectMapper;

import com.fasterxml.jackson.databind.ObjectMapper;
import de.gematik.rs.vau.VAUServerHello;
import de.gematik.ti.vauchannel.cxf.VAUProtocolProvider;
import java.security.Security;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class HandshakeRSJsonTest {

  static {
    Security.addProvider(new BouncyCastleProvider());
  }

  @Autowired public HandshakeRSJson handshakeRSJson;
  @Autowired VAUProtocolProvider vauProtocolProvider;
  String CLIENT_HELLO =
      "{\"MessageType\":\"VAUClientHello\",\"Data\":\"eyJEYXRhVHlwZSI6IlZBVUNsaWVudEhlbGxvRGF0YSIsIkNpcGhlckNvbmZpZ3VyYXRpb24iOlsiQUVTLTI1Ni1HQ00tQnJhaW5wb29sUDI1NnIxLVNIQS0yNTYiXSwiUHVibGljS2V5IjoiTUZvd0ZBWUhLb1pJemowQ0FRWUpLeVFEQXdJSUFRRUhBMElBQkppcTFxMHZSRDZ4VkdrRWN2RVdkTWN0bHh2cTlXOUNpaExNelBGeHZFWXJtRExpQTVFekRvOEVTVGVsQzdnSnZHcU1oQnFoVzFjYnBqR3hCdGJZRnFBPSJ9\",\"Authorization\":\"PHNhbWwyOkFzc2VydGlvbiBJRD0iX2JlZTE1NGQ5LTQwMTEtNDlhZi1hYjMzLTczY2UxYmFiNjBmZSIgSXNzdWVJbnN0YW50PSIyMDE5LTA4LTE1VDA3OjM0OjMwLjI3MVoiIFZlcnNpb249IjIuMCIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJzYW1sMjpBc3NlcnRpb25UeXBlIj48c2FtbDI6SXNzdWVyPmh0dHBzOi8vYWt0b3ItZ2F0ZXdheS5nZW1hdGlrLmRlL2F1dGh6PC9zYW1sMjpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlNpZ25lZEluZm8+PGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwNy8wNS94bWxkc2lnLW1vcmUjc2hhMjU2LXJzYS1NR0YxIi8+PGRzOlJlZmVyZW5jZSBVUkk9IiNfYmVlMTU0ZDktNDAxMS00OWFmLWFiMzMtNzNjZTFiYWI2MGZlIj48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz48ZHM6RGlnZXN0VmFsdWU+NlFYUE9UbEo2Z0pPTWdOUWlNZ2Z4aEpWVHMwdUp6eWMyYVY4M2loSWpLRT08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU+VjgvTkdVQVpQaXZXdXhZb0J5Qm5HdzF2R2EyR2RqVmYzaHJITkVvUDF5WThZNVk3T2g2c3hWQll6eDNzS0cvV3BmdVBlUlV5Y1QxMElnaVhVc3ZWY1JQOW5rWFl3U3pINDVob3crSVk5S3pLK0NDTjR3V3ZVczVFSm1mUWJNKzhOcUVER2hvSno0OG5uQVlSTGttVDBLbkNMdjJ4RDc1eDVmK0loSVhFaHNYL2RqMjAvZUF6aU9nVVcrSk9TZDUyNEJzbEExdUpyQXZxOXdFbnMzVm5xVTBra1d6SDY3Yk9aSm9OaU1Tcmx5VjIxS1Qyb0V2WmZJZUgxZXNRSWtZSnhPbTliSjE3bzF6bzQzb3BIK3EzRmxtL04wRUIvTWt1Y21uUG83QUJjYmozRzRkanNiUGVVQU90ZDdIZlFvOU1QMjZDQk5SZjhwL0lqU011UGdsVmpnPT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUVjakNDQTFxZ0F3SUJBZ0lIQWRrRG5rL3RRakFOQmdrcWhraUc5dzBCQVFzRkFEQ0JoREVMTUFrR0ExVUVCaE1DUkVVeEh6QWQKQmdOVkJBb01GbWRsYldGMGFXc2dSMjFpU0NCT1QxUXRWa0ZNU1VReE1qQXdCZ05WQkFzTUtVdHZiWEJ2Ym1WdWRHVnVMVU5CSUdSbApjaUJVWld4bGJXRjBhV3RwYm1aeVlYTjBjblZyZEhWeU1TQXdIZ1lEVlFRRERCZEhSVTB1UzA5TlVDMURRVEkwSUZSRlUxUXRUMDVNCldUQWVGdzB4T1RBMU1qY3lNakF3TURCYUZ3MHlOREExTWpjeU1UVTVOVGxhTUhjeEN6QUpCZ05WQkFZVEFrUkZNU1l3SkFZRFZRUUsKREIxblpXMWhkR2xySUZSRlUxUXRUMDVNV1NBdElFNVBWQzFXUVV4SlJERkFNRDRHQTFVRUF3dzNRWFYwYjNKcGMybGxjblZ1WjNOawphV1Z1YzNRZ1pzTzhjaUJrYVdVZ1ZHOXJaVzV6YVdkdVlYUjFjbVZ1SUZSRlUxUXRUMDVNV1RDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxXTUQ0Wm1ZUWo4NzN6ZGVPVjhnTE9OcURGTlF1Qnk0NWhlSjBYenVmMStDYmxBT1YxSDl5Qm8KcCtKWjlJOWltcituTGFYVkRFRkhVcXk4YnB5WDY0Wk50WXhKRUhKWmlqSHBkelFHVFZ3elRpVFhPL25JaDcyUXdUazJQS1RVV2JpdgpLUTdMYVRBRFFEQmFwcUJWU1dFdEY5VnVGc0Q4T0t3bU5od0F1bm9XVXB3bGxmbWFHbnBSOHJVbmJ1cGw4dXlvNmo4d3JBMlIzdUJiCnJ0V0o5SFNSWEtMT2YvVEs1b2JNL2RDR3hnWUxPY1Z6d2NrWTBtVGNPS3FLRmVrOTdMaCtPdFdrWVlTUXhOT3RzNUZ3MVEvb3VtVmsKdlNDa2RuOG1SVXF1Z3VqYk1yZmFmN1kvb1IrM1ZoMkptbjk2bXpuMlNMRlp0TVk1eUJEWGlGdWhlbU1DQXdFQUFhT0I5RENCOFRBNApCZ2dyQmdFRkJRY0JBUVFzTUNvd0tBWUlLd1lCQlFVSE1BR0dIR2gwZEhBNkx5OWxhR05oTG1kbGJXRjBhV3N1WkdVdmIyTnpjQzh3Ckh3WURWUjBqQkJnd0ZvQVVQN2FDNG1sWmVjdzUwdFZSSjQ3Z3Bsa0tNYTh3TkFZRkt5UUlBd01FS3pBcE1DY3dKVEFqTUNFd0V3d1IKWlZCQklFRjFkRzl5YVhOcFpYSjFibWN3Q2dZSUtvSVVBRXdFZ1Uwd0RBWURWUjBUQVFIL0JBSXdBREFPQmdOVkhROEJBZjhFQkFNQwpCNEF3SFFZRFZSME9CQllFRkhQS1NHWU1KakVnS1FjR01oNjkxRUFPODQ2MU1DRUdBMVVkSUFRYU1CZ3dDZ1lJS29JVUFFd0VnVXN3CkNnWUlLb0lVQUV3RWdTTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBTnQ2TGlTWnJIWUc5Zmk4MUlGcUlJVG14Vk9hQjJkQ2lQRVUKb1U4U09qUTlMMmZXNVBHMFQ2dlpjNEN6c0hpSEdZenpIc1RvcU9uU2xEd3RPNnl1aDhSa01OZXI4bk90VXZFTG55QXRRMmpLekFlSgpiS2lVSmszdjN0M25pUS80ZnFwWlkwa0ZiMGVJYWVzT2ZONUxxcFpEMGFjbnVUMzVWMyswNlNLUDRuOG9uWk91WERoeHNXRTJZN0kwCkgrTGMwQVd3NkpDQlJPdkh0eUlhTVNKazFxZXR4TU5naVVhemdxSi84dmlZdVFIRnRzdytBaGpVNURNN1VDUVJBODRZd2kwWjVMUlkKNW80d1FDeU1qdVNSUEtzcER3S3UxbUh1dTFSRFdCLzdWWTNIYURMeDhZUTgrSmdBWnM3QjNjUkZkS2FURWU2bGg5V2hCVllSdUZrbQo0MHc9PC9kczpYNTA5Q2VydGlmaWNhdGU+PC9kczpYNTA5RGF0YT48L2RzOktleUluZm8+PC9kczpTaWduYXR1cmU+PHNhbWwyOlN1YmplY3Q+PHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0Olg1MDlTdWJqZWN0TmFtZSI+Q049VXJzbWFyIFBmZWZmZXIsMi41LjQuNDI9IzBjMDY1NTcyNzM2ZDYxNzIsMi41LjQuND0jMGMwNzUwNjY2NTY2NjY2NTcyLE9VPVgxMTQ0Mjg1MzgsT1U9MjIyMTUyODI3LE89aGtrIEtyYW5rZW5rYXNzZSxDPURFPC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIi8+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAxOS0wOC0xNVQwNzozNDozMC4yNzFaIiBOb3RPbk9yQWZ0ZXI9IjIwMTktMDgtMTVUMDc6NDk6MzAuMjcxWiI+PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1ZGllbmNlPmh0dHBzOi8vYWt0b3ItZ2F0ZXdheS5nZW1hdGlrLmRlPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTktMDgtMTVUMDc6MzQ6MzAuMjcxWiI+PHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6U21hcnRjYXJkUEtJPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ1cm46b2FzaXM6bmFtZXM6dGM6eGFjbWw6MS4wOnN1YmplY3Q6c3ViamVjdC1pZCIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1cmkiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZT48SW5zdGFuY2VJZGVudGlmaWVyIGV4dGVuc2lvbj0iWDExNDQyODUzOCIgcm9vdD0iMS4yLjI3Ni4wLjc2LjQuOCIgeG1sbnM9InVybjpobDctb3JnOnYzIi8+PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InVybjpvYXNpczpuYW1lczp0Yzp4YWNtbDoxLjA6cmVzb3VyY2U6cmVzb3VyY2UtaWQiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dXJpIj48c2FtbDI6QXR0cmlidXRlVmFsdWU+PHBocjpSZWNvcmRJZGVudGlmaWVyIHhtbG5zOnBocj0iaHR0cDovL3dzLmdlbWF0aWsuZGUvZmEvcGhyL3YxLjEiPjxwaHI6SW5zdXJhbnRJZCBleHRlbnNpb249IlgxMTQ0Mjg1MzgiIHJvb3Q9IjEuMi4yNzYuMC43Ni40LjgiLz48cGhyOkhvbWVDb21tdW5pdHlJZD51cm46b2lkOjEuMS40NTY3MzMyLjEuMTwvcGhyOkhvbWVDb21tdW5pdHlJZD48L3BocjpSZWNvcmRJZGVudGlmaWVyPjwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ1cm46Z2VtYXRpazpmYTpwaHI6MS4wOmRldmljZTpkZXZpY2UtaWQiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dXJpIj48c2FtbDI6QXR0cmlidXRlVmFsdWU+PHBocnM6RGV2aWNlSUQgRGlzcGxheU5hbWU9IkZkVjEiIHhtbG5zOnBocnM9Imh0dHA6Ly93cy5nZW1hdGlrLmRlL2ZkL3BocnMvQXV0aG9yaXphdGlvblNlcnZpY2UvdjEuMSI+PHBocjpEZXZpY2UgeG1sbnM6cGhyPSJodHRwOi8vd3MuZ2VtYXRpay5kZS9mYS9waHIvdjEuMSI+N3F4RWt4K2FsWTR2bWNnQ3FrejNQeDhmdW9wUUZGSUh0dGFFbU5DUDluMD08L3BocjpEZXZpY2U+PC9waHJzOkRldmljZUlEPjwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ1cm46b2FzaXM6bmFtZXM6dGM6eGFjbWw6MS4wOnN0YXR1czpzdGF0dXMtaWQiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dXJpIj48c2FtbDI6QXR0cmlidXRlVmFsdWU+PHBocnM6UmVjb3JkU3RhdGUgeG1sbnM6cGhycz0iaHR0cDovL3dzLmdlbWF0aWsuZGUvZmQvcGhycy9BdXRob3JpemF0aW9uU2VydmljZS92MS4xIj48cGhyczpBQ1RJVkFURUQvPjwvcGhyczpSZWNvcmRTdGF0ZT48L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjwvc2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sMjpBdXRoekRlY2lzaW9uU3RhdGVtZW50IERlY2lzaW9uPSJQZXJtaXQiIFJlc291cmNlPSJYMTE0NDI4NTM4Ij48c2FtbDI6QWN0aW9uIE5hbWVzcGFjZT0iaHR0cDovL3dzLmdlbWF0aWsuZGUvZmEvcGhyL3YxLjAiPkRPQ1VNRU5UX0FVVEhPUklaQVRJT048L3NhbWwyOkFjdGlvbj48L3NhbWwyOkF1dGh6RGVjaXNpb25TdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+\"}";

  @Test
  @Ignore
  public void processAClientHello() throws Exception {
    String responseStr = handshakeRSJson.process(CLIENT_HELLO);
    ObjectMapper mapper = objectMapper();
    VAUServerHello vAUClientHello = mapper.readValue(responseStr, VAUServerHello.class);
  }
}
